description: "None yet"

classes:
  - name: AerodynamicsFactory (Coefficient)
    methods:
      - name: constant
      - name: custom
      - name: tabulated
      - name: scaled

  - name: AtmosphereFactory
    methods:
      - name: exponential
      - name: tabulated
      - name: nrlmsise00
      - name: custom

  - name: RadiationPressureInterfaceFactory
    methods:
      - name: cannonball
      - name: panelled

  - name: RotationFactory
    methods:
      - name: simple
      - name: simple_spice
      - name: synchronous
      - name: spice
      - name: gcrs_to_itrs
      - name: constant

  - name: GravityFieldFactory
    methods:
      - name: point
      - name: spherical_harmonic
      - name: point_spice

        # more here unsure - spherical harmonics

  - name: EphemerisFactory
    methods:
      - name: approximate
      - name: direct_spice
      - name: interp_spice
      - name: constant
      - name: custom
      - name: keplerian
        parameters:
          - name: initial_state
          - name: initial_epoch
          - name: gravitational_parameter
#            - name: frame_origin
#            - name: frame_orientation
          - name: frame
#            - name: root_finder_absolute_tolerance
#            - name: root_finder_maximum_iterations
          - name: root_finder

      - name: keplerian_from_spice
        parameters:
          - name: body
          - name: epoch
          - name: gravitational_parameter
          #            - name: frame_origin
          #            - name: frame_orientation
          - name: frame
          #            - name: root_finder_absolute_tolerance
          #            - name: root_finder_maximum_iterations
          - name: root_finder
      - name: tabluated
      - name: scaled

  - name: ShapeFactory
    methods:
      - name: spherical
      - name: oblate
      - name: spherical_from_spice

  - name: GravityFieldVariationFactory


  - name: LinkEndNetworkFactory # <<----

functions:
  - name: create_system_of_bodies
    short_summary: >-
      Creates a system of bodies from body settings.
    deprecation_warning:
      version:
        deprecated_in: 1.0.0
        removed_in: 1.2.0
      obj_old: OldObject
      obj_new: NewObject
      reason: "it is faster, better, stronger."
    extended_summary: |
      A very extended summary!

      Also, this is how you include math in docstrings to be rendered as latex...

      .. math::

         (a + b)^2 = a^2 + 2ab + b^2

         (a - b)^2 = a^2 - 2ab + b^2

    parameters:
      - name: body_settings
        type: "{{ api('body_settings') }}"
        description: "Body settings for each body to be created in the system of bodies"
    returns:
      - name: system_of_bodies
        type: tudatpy.kernel.simulation.SystemOfBodies
        description: "System of bodies"
    yields:
      - name: system_of_bodies
        type: tudatpy.kernel.simulation.SystemOfBodies
        description: "System of bodies"
    receives: ""
    other_parameters:
      - name: system_of_bodies
        type: tudatpy.kernel.simulation.SystemOfBodies
        description: "System of bodies"
    raises:
      - name: err_1
        type: tudatpy.errors.Error1
        description: "This is error 1, it means nothing."
      - name: err_2
        type: tudatpy.errors.Error2
        description: "This is error 2, it also means nothing."
    warns:
      - name: system_of_bodies
        type: tudatpy.kernel.simulation.SystemOfBodies
        description: "System of bodies"
    warnings:
      - name: system_of_bodies
        type: tudatpy.kernel.simulation.SystemOfBodies
        description: "System of bodies"
    see_also:
      - name: system_of_bodies
        type: tudatpy.kernel.simulation.SystemOfBodies
        description: "System of bodies"
    notes:
      - name: system_of_bodies
        type: tudatpy.kernel.simulation.SystemOfBodies
        description: "System of bodies"
    references:
      - name: system_of_bodies
        type: tudatpy.kernel.simulation.SystemOfBodies
        description: "System of bodies"
    examples:

# TODO: challenge: multiple constructors, multiple overloaded functions
#  can Python even show multiple constructor