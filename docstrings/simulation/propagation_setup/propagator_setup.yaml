description: "This module provides the functionality for creating propagator settings."
notes: "None"

# The structure of this file follows the order of expose_propagator_setup.cpp (tudatpy) and
# includes content for nBodyStateDerivative.h and bulirschStoerVariableStepsizeIntegrator.h (tudat)

# Enums
# TODO
#       py::enum_<tp::TranslationalPropagatorType>
#       py::enum_<tp::RotationalPropagatorType>


classes:

  # base: dependent variables
  - name: DependentVariableSaveSettings
    short_summary: "Functional class to define settings for dependent variable to save."
    extendend_summary: |
      Class to define settings for dependent variable to save.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.


  # base: propagator
  - name: PropagatorSettings
    short_summary: "Functional base class to define settings for propagators."
    extendend_summary: |
      Base class to define settings for propagators. Derived classes are split into settings for single- and multi-arc dynamics.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.

      - name: resetInitialStates # [cpp]
      - name: reset_initial_states # [py]
        short_summary: "Function to reset the initial state used as input for numerical integration."
        extended_summary: |
          Function to reset the initial state used as input for numerical integration.
        parameters:
        - name: initialBodyStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: Initial states to be reset for the numerical propagation.


  # derived: propagator (1)
  - name: SingleArcPropagatorSettings
    short_summary: "`PropagatorSettings`-derived class to define settings for single-arc dynamics."
    extendend_summary: |
       `PropagatorSettings`-derived class to define settings for single-arc dynamics.

    attributes:
    - name: terminationSettings_ # [cpp]
      type: PropagationTerminationSettings # [cpp]
    - name: termination_settings # [py]
      type: PropagationTerminationSettings # [py]
      description: Settings for creating the object that checks whether the propagation is finished.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
        Instances of this class are typically not generated by the user. Settings objects for integrators should be
        instantiated through the factory functions of a derived class.


  # derived, level 2: translational propagator
  - name: TranslationalStatePropagatorSettings
    short_summary: "`SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics."
    extendend_summary: |
       `SingleArcPropagatorSettings`-derived class to define settings for single-arc translational dynamics.

    attributes:
    - name: accelerationSettingsMap_ # [cpp] readonly
      type: SelectedAccelerationMap # [cpp] readonly
    - name: acceleration_settings # [py] readonly
      type: SelectedAccelerationMap # [py] readonly
      description: Settings for retrieving the accelerations acting on the body during propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
        Instances of this class are typically not generated by the user. Settings objects for integrators should be
        instantiated through the factory functions of a derived class.

      - name: resetInitialStates # [cpp]
      - name: reset_initial_states # [py]
        short_summary: "Function to reset the initial state used as input for numerical integration."
        extended_summary: |
          Function to reset the initial state used as input for numerical integration.
        parameters:
        - name: initialBodyStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: Initial states to be reset for the numerical propagation.

      - name: resetIntegratedStateModels # [cpp]
      - name: recreate_state_derivative_models # [py]
        short_summary: "Function to (re)create the integrated state models (e.g. acceleration/torque/mass models)."
        extended_summary: |
          Function to create the integrated state models (e.g. acceleration/torque/mass models) for
          each fo the propagators state types contained in `propagatorSettingsMap_`.
        parameters:
        - name: bodies # [cpp]
          type: SystemOfBodies # [cpp]
        - name: bodies # [py]
          type: SystemOfBodies # [py]
          description: System of bodies used in the propagation.

      - name: getSingleTypePropagatorSettings # [cpp]
      - name: single_type_settings # [py]
        short_summary: "Function to retrieve a single type of propagator."
        extended_summary: |
          Function to retrieve a single type of propagator (translational, rotational or mass). This function is
          often used in multi-type propagation.
        parameters:
        - name: stateType # [cpp]
          type: IntegratedStateType # [cpp]
        - name: state_type # [py]
          type: IntegratedStateType # [py]
          description: State type to be retrieved.


  # derived, level 2: rotational state propagator
  - name: RotationalStatePropagatorSettings
    short_summary: "`SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation."
    extendend_summary: |
       `SingleArcPropagatorSettings`-derived class to define settings for single-arc rotational state propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
        Instances of this class are typically not generated by the user. Settings objects for integrators should be
        instantiated through the factory functions of a derived class.


  # derived, level 2: mass propagator
  - name: MassPropagatorSettings
    short_summary: "`SingleArcPropagatorSettings`-derived class to define settings for single-arc mass propagation."
    extendend_summary: |
       `SingleArcPropagatorSettings`-derived class to define settings for single-arc mass propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
        Instances of this class are typically not generated by the user. Settings objects for integrators should be
        instantiated through the factory functions of a derived class.

  # base: termination settings
  - name: PropagationTerminationSettings
    short_summary: "Functional base class to define termination settings for the propagation."
    extendend_summary: |
       Functional base classclass to define termination settings for the propagation.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
          Instances of this class are typically not generated by the user because this is a base class.

  # derived: dependent variable termination settings
  - name: PropagationDependentVariableTerminationSettings
    short_summary: "`PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables."
    extendend_summary: |
       `PropagationTerminationSettings`-derived class to define termination settings for the propagation from dependent variables.

    methods:
      - name: ctor
        short_summary: "Constructor."
        extended_summary: |
        Instances of this class are typically not generated by the user. Settings objects for integrators should be
        instantiated through the factory functions of a derived class.

functions:

