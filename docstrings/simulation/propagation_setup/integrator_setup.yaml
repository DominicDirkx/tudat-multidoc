description: "This module provides the functionality for creating integrator settings."
notes: "None"

# The structure of this file follows the order of expose_integrator_setup.cpp (tudatpy) and
# includes content for createNumericalIntegrator.h (tudat)

# Enums
# TODO
#       py::enum_<tni::AvailableIntegrators>
#       py::enum_<tni::RungeKuttaCoefficients::CoefficientSets>
#       py::enum_<tni::ExtrapolationMethodStepSequences>


classes:

  # base
  - name: IntegratorSettings
    short_summary: "Functional base class to define settings for integrators."
    extendend_summary: |
      Class to define settings for numerical integrators, for instance for use in numerical integration of equations of motion/
      variational equations. This class can be used for simple integrators such as fixed step RK and Euler. Integrators that
      require more settings to define have their own derived class.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]

  # TODO: change this
  # derived
  - name: SphericalHarmonicTorqueSettings
    short_summary: "`TorqueSettings`-derived class to define settings for torques caused by spherical harmonic gravity."
    extendend_summary: |
      `TorqueSettings`-derived class to define settings for torques caused by spherical harmonic gravity.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for torques should be instantiated through the factory functions of a derived class." # [cpp]


functions:

  # factory functions

  # Euler
  - name: eulerSettings<IndependentVariableType=double> # [cpp]
  - name: euler # [py]
    short_summary: "Creates the settings for the Euler integrator."
    extended_summary: |
      Factory function to create settings for the Euler integrator. For this integrator, the step size is kept
      constant.

    parameters:
      - name: initialTime # [cpp]
        type: IndependentVariableType # [cpp]
      - name: initial_time # [py]
        type: IndependentVariableType # [py]
        description: Start time (independent variable) of numerical integration.

      - name: initialTimeStep # [cpp]
        type: IndependentVariableType # [cpp]
      - name: initial_time_step # [py]
        type: IndependentVariableType # [py]
        description: Initial and constant value for the time step.

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).

    returns:
      - type: IntegratorSettings
        description: Integrator settings object.


  # Runge Kutta 4
  - name: rungeKutta4Settings<IndependentVariableType=double> # [cpp]
  - name: runge_kutta_4 # [py]
    short_summary: "Creates the settings for the Runge Kutta 4 integrator."
    extended_summary: |
      Factory function to create settings for the Runge Kutta 4 integrator. For this integrator, the step size is kept
      constant.

    parameters:
      - name: initialTime # [cpp]
        type: IndependentVariableType # [cpp]
      - name: initial_time # [py]
        type: IndependentVariableType # [py]
        description: Start time (independent variable) of numerical integration.

      - name: initialTimeStep # [cpp]
        type: IndependentVariableType # [cpp]
      - name: initial_time_step # [py]
        type: IndependentVariableType # [py]
        description: Initial and constant value for the time step.

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).

    returns:
      - type: IntegratorSettings
        description: Integrator settings object.


  # Runge Kutta variable step size
  - name: rungeKuttaVariableStepSettingsScalarTolerances<IndependentVariableType=double> # [cpp]
  - name: runge_kutta_4 # [py]
    short_summary: "Creates the settings for the Runge Kutta variable step size integrator."
    extended_summary: |
    Factory function to create settings for the Runge Kutta variable step size integrator.
    For this integrator, the step size is varied based on the tolerances and safety factor provided. In addition


    parameters:
      - name: initialTime # [cpp]
        type: IndependentVariableType # [cpp]
      - name: initial_time # [py]
        type: IndependentVariableType # [py]
        description: Start time (independent variable) of numerical integration.

      - name: initialTimeStep # [cpp]
        type: IndependentVariableType # [cpp]
      - name: initial_time_step # [py]
        type: IndependentVariableType # [py]
        description: Initial and constant value for the time step.

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 1 means that the state is saved once per integration step).

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).

    returns:
      - type: IntegratorSettings
        description: Integrator settings object.