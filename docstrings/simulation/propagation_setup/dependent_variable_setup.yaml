description: "This module provides the functionality for creating dependent variable settings."
notes: "None"

# the structure of this file follows the order of expose_propagation_setup.cpp (tudatpy) and
# includes content for propagationOutputSettings.h (tudat)

# Enums
# TODO
#       py::enum_<tp::PropagationDependentVariables>



classes:

  # base
  - name: VariableSettings
    short_summary: "Functional base class to define settings for variables."
    extendend_summary: |
      This class is a functional base class for defining settings for variables.
      Any variable that requires additional information in addition to what can be provided here, should be defined by a
      dedicated derived class.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]


  # derived (level 1)
  - name: SingleDependentVariableSaveSettings
    short_summary: "`VariableSettings`-derived class to define settings for dependent variables that are to be saved during propagation."
    extendend_summary: |
      Functional base class for defining settings for dependent variables that are to be computed and saved during propagation.
      Any dependent variable that requires additional information in addition to what can be provided here, should be
      defined by a dedicated derived class.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (level 2)
  - name: SingleAccelerationDependentVariableSaveSettings
      short_summary: "`SingleDependentVariableSaveSettings`-derived class to save a single acceleration (norm or vector) during propagation."
      extendend_summary: "Class to define settings for saving a single acceleration (norm or vector) during propagation. Note: this acceleration is returned in the inertial frame!"

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for rotation models should be instantiated through the factory functions of a derived class." # [cpp]


functions:

  # factory functions:

  - name: createDependentVariableSaveSettings # [cpp]
  - name: create # [py]
    short_summary: "Function to create settings for a dependent variable."
    extended_summary: "TODO" # TODO

  # Mach number
  - name: machNumberDependentVariable # [cpp]
  - name: mach_number # [py]
    short_summary: "Function to add the Mach number to the dependent variables to save."
    extended_summary: "Function to add the Mach number to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: bodyWithAtmosphere # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with atmosphere with respect to which the Mach number is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Altitude
  - name: altitudeDependentVariable # [cpp]
  - name: altitude # [py]
    short_summary: "Function to add the altitude to the dependent variables to save."
    extended_summary: "Function to add the altitude to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the vehicle and it depends on the central body's shape."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with atmosphere with respect to which the altitude is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Airspeed
  - name: airspeedDependentVariable # [cpp]
  - name: airspeed # [py]
    short_summary: "Function to add the airspeed to the dependent variables to save."
    extended_summary: "Function to add the airspeed to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with atmosphere with respect to which the airspeed is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Density
  - name: densityDependentVariable # [cpp]
  - name: density # [py]
    short_summary: "Function to add the local density to the dependent variables to save."
    extended_summary: "Function to add the density (at position of body undergoing acceleration) to the dependent variables to save. Requires an aerodynamic acceleration to be acting on the vehicle."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: bodyWithAtmosphere # [cpp]
        type: std::str # [cpp]
      - name: body_with_atmosphere # [py]
        type: str # [py]
        description: Body with atmosphere with respect to which the density is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Relative speed
  - name: relativeSpeedDependentVariable # [cpp]
  - name: relative_speed # [py]
    short_summary: "Function to add the relative speed (norm of the velocity vector) to the dependent variables to save."
    extended_summary: "Function to add the relative speed (norm of the velocity vector) with respect to a second body to the dependent variables to save. The relative speed is computed between the bodies' centers of mass."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: relativeBody # [cpp]
        type: std::str # [cpp]
      - name: relative_body # [py]
        type: str # [py]
        description: Body with respect to which the relative speed is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Relative position
  - name: relativePositionDependentVariable # [cpp]
  - name: relative_speed # [py]
    short_summary: "Function to add the relative position vector to the dependent variables to save."
    extended_summary: "Function to add the relative position vector with respect to a second body to the dependent variables to save. The relative position is computed between the bodies' centers of mass."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: relativeBody # [cpp]
        type: std::str # [cpp]
      - name: relative_body # [py]
        type: str # [py]
        description: Body with respect to which the relative position is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Relative distance
  - name: relativeDistanceDependentVariable # [cpp]
  - name: relative_distance # [py]
    short_summary: "Function to add the relative distance (norm of the position vector) to the dependent variables to save."
    extended_summary: "Function to add the relative distance (norm of the position vector) with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: relativeBody # [cpp]
        type: std::str # [cpp]
      - name: relative_body # [py]
        type: str # [py]
        description: Body with respect to which the relative distance is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Relative velocity
  - name: relativeVelocityDependentVariable # [cpp]
  - name: relative_velocity # [py]
    short_summary: "Function to add the relative velocity vector to the dependent variables to save."
    extended_summary: "Function to add the relative velocity vector with respect to a second body to the dependent variables to save. The relative distance is computed between the bodies' centers of mass."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: relativeBody # [cpp]
        type: std::str # [cpp]
      - name: relative_body # [py]
        type: str # [py]
        description: Body with respect to which the relative velocity is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Keplerian state
  - name: keplerianStateDependentVariable # [cpp]
  - name: keplerian_state # [py]
    short_summary: "Function to add the Keplerian state to the dependent variables to save."
    extended_summary: "Function to add the Keplerian state to the dependent variables to save. The Keplerian state is returned in this order: 1: Semi-major Axis. 2: Eccentricity. 3: Inclination. 4: Argument of Periapsis. 5. Right Ascension of the Ascending Node. 6: True Anomaly."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the Keplerian state is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # TODO: modified_equinoctial_state and others are not exposed


  # Single acceleration
  - name: singleAccelerationDependentVariable # [cpp]
  - name: single_acceleration # [py]
    short_summary: "Function to add an acceleration vector to the dependent variables to save."
    extended_summary: "Function to add an acceleration vector to the dependent variables to save."

    parameters:
      - name: accelerationModelType # [cpp]
        type: AvailableAcceleration # [cpp]
      - name: acceleration_type # [py]
        type: AvailableAcceleration # [py]
        description: Acceleration type to be saved.

      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting acceleration.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single acceleration norm
  - name: singleAccelerationNormDependentVariable # [cpp]
  - name: single_acceleration_norm # [py]
    short_summary: "Function to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save."
    extended_summary: "Function to add a scalar acceleration (norm of the acceleration vector) to the dependent variables to save."

    parameters:
      - name: accelerationModelType # [cpp]
        type: AvailableAcceleration # [cpp]
      - name: acceleration_type # [py]
        type: AvailableAcceleration # [py]
        description: Acceleration type to be saved (see `AvailableAcceleration` enum).

      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting acceleration.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single spherical harmonic vector term
  - name: sphericalHarmonicAccelerationTermsDependentVariable # [cpp]
  - name: spherical_harmonic_terms_acceleration # [py]
    short_summary: "Function to add a single term of the spherical harmonic acceleration vector to the dependent variables to save."
    extended_summary: "Function to add single term of the spherical harmonic acceleration vector to the dependent variables to save."

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting acceleration.

      - name: componentIndices # [cpp]
        type: std::vector<std::pair> # [cpp]
      - name: component_indices # [py]
        type: list[tuple] # [py]
        description: Tuples of (degree, order) indicating the terms to save.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single spherical harmonic scalar term
  - name: sphericalHarmonicAccelerationTermsNormDependentVariable # [cpp]
  - name: spherical_harmonic_terms_acceleration_norm # [py]
    short_summary: "Function to add a single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save."
    extended_summary: "Function to add single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save."

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting acceleration.

      - name: componentIndices # [cpp]
        type: std::vector<std::pair> # [cpp]
      - name: component_indices # [py]
        type: list[tuple] # [py]
        description: Tuples of (degree, order) indicating the terms to save.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Total acceleration vector
  - name: totalAccelerationDependentVariable # [cpp]
  - name: total_acceleration # [py]
    short_summary: "Function to add the total acceleration vector acting on a body to the dependent variables to save."
    extended_summary: "Function to add the total acceleration vector acting on a body to the dependent variables to save."

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Total scalar acceleration
  - name: totalAccelerationDependentVariable # [cpp]
  - name: total_acceleration # [py]
    short_summary: "Function to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save."
    extended_summary: "Function to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save."

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Aerodynamic force coefficients
  - name: aerodynamicForceCoefficientDependentVariable # [cpp]
  - name: aerodynamic_force_coefficients # [py]
    short_summary: "Function to add the aerodynamic force coefficients to the dependent variables to save."
    extended_summary: "Function to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic acceleration acting on the vehicle. The coefficients are returned in the following order: drag force, side force, lift force."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body undergoing acceleration.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Aerodynamic moment coefficients
  - name: aerodynamicMomentCoefficientDependentVariable # [cpp]
  - name: aerodynamic_moment_coefficients # [py]
    short_summary: "Function to add the aerodynamic moment coefficients to the dependent variables to save."
    # TODO: order of coefficients is not known
    extended_summary: "Function to add the aerodynamic force coefficients to the dependent variables to save. It requires an aerodynamic torque acting on the vehicle. The coefficients are returned in the following order: TODO"

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body undergoing acceleration.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Latitude
  - name: latitudeDependentVariable # [cpp]
  - name: latitude # [py]
    short_summary: "Function to add the latitude to the dependent variables to save."
    extended_summary: "Function to add the latitude to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the latitude is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Longitude
  - name: longitudeDependentVariable # [cpp]
  - name: longitude # [py]
    short_summary: "Function to add the longitude to the dependent variables to save."
    extended_summary: "Function to add the longitude to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the longitude is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.

  # TODO: geodetic latitude not yet exposed

  # Heading angle
  - name: headingDependentVariable # [cpp]
  - name: heading_angle # [py]
    short_summary: "Function to add the heading angle to the dependent variables to save."
  # TODO: check explanation of heading angle
    extended_summary: "Function to add the heading angle to the dependent variables to save. The heading angle is the angle between the X-axis of the vertical frame and the XZ-plane in the groundspeed-based trajectory frame (see Mooij, 1994)."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the heading angle is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Flight path angle
  - name: flightPathAngleDependentVariable # [cpp]
  - name: flight_path_angle # [py]
    short_summary: "Function to add the flight path angle to the dependent variables to save."
    # TODO: check explanation of flight path angle
    extended_summary: "Function to add the flight path angle to the dependent variables to save. The flight path angle is the angle between the X-axis of the groundspeed-based trajectory frame and the local horizontal plane defined in the vertical reference frame (see Mooij, 1994)."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the flight path angle is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Angle of attack
  - name: angleOfAttackDependentVariable # [cpp]
  - name: angle_of_attack # [py]
    short_summary: "Function to add the angle of attack to the dependent variables to save."
    # TODO: check explanation of angle of attack
    extended_summary: "Function to add the angle of attack angle to the dependent variables to save. The angle of attack is the angle between the X-axis of the body-fixed reference frame and the XY plane in the groundspeed-based aerodynamic frame (see Mooij, 1994)."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the angle of attack is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Sideslip angle
  - name: sideslipAngleDependentVariable # [cpp]
  - name: sideslip_angle # [py]
    short_summary: "Function to add the sideslip angle to the dependent variables to save."
    # TODO: add explanation of sideslip angle
    extended_summary: "Function to add the sideslip angle to the dependent variables to save. The sideslip angle is ???"

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the sideslip angle is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Bank angle
  - name: bankAngleDependentVariable # [cpp]
  - name: bank_angle # [py]
    short_summary: "Function to add the bank angle to the dependent variables to save."
    # TODO: add explanation of bank angle
    extended_summary: "Function to add the bank angle to the dependent variables to save. The bank angle is ???"

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the bank angle is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Radiation pressure
  - name: radiationPressureDependentVariable # [cpp]
  - name: radiation_pressure # [py]
    short_summary: "Function to add the radiation pressure to the dependent variables to save."
    extended_summary: "Function to add the radiation pressure to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: radiatingBody # [cpp]
        type: std::str # [cpp]
      - name: radiating_body # [py]
        type: str # [py]
        description: Radiating body.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Total gravity field variation acceleration
  - name: totalGravityFieldVariationAccelerationContributionVariable # [cpp]
  - name: total_gravity_field_variation_acceleration # [py]
    short_summary: "Function to add the total gravity field variation acceleration to the dependent variables to save."
    extended_summary: "Function to add the total gravity field variation acceleration to the dependent variables to save. This function does not distinguish between different sources of variations of the gravity field. To select only one contribution, look for the single gravity field variation acceleration."

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting the acceleration.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single gravity field variation acceleration
  - name: singleGravityFieldVariationAccelerationContributionVariable # [cpp]
  - name: single_gravity_field_variation_acceleration # [py]
    short_summary: "Function to add a single gravity field variation acceleration to the dependent variables to save."
    extended_summary: "Function to add a single gravity field variation acceleration to the dependent variables to save. This function does distinguish between different sources of variations of the gravity field, but not between terms of the spherical harmonic expansion. To select specific combinations of order and degree, look for the single per term gravity field variation acceleration."

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting the acceleration.

      - name: deformationType # [cpp]
        type: std::str # [cpp]
      - name: deformation_type # [py]
        type: str # [py]
        description: Deformation type (see BodyDeformationTypes).

      - name: identifier # [cpp]
        type: std::str, default="" # [cpp]
      - name: identifier # [py]
        type: str, default="" # [py]
        description: Identifier for the deformation type.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single, per-term gravity field variation acceleration
  - name: singleGravityFieldVariationSeparateTermsAccelerationContributionVariable # [cpp]
  - name: single_per_terms_gravity_field_variation_acceleration # [py]
    short_summary: "Function to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save."
    extended_summary: "Function to add specific spherical harmonic terms of a single gravity field variation acceleration to the dependent variables to save."

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting the acceleration.

      - name: componentIndices # [cpp]
        type: std::vector<std::pair> # [cpp]
      - name: component_indices # [py]
        type: list[tuple] # [py]
        description: Tuples of (degree, order) indicating the terms to save.


      - name: deformationType # [cpp]
        type: std::str # [cpp]
      - name: deformation_type # [py]
        type: str # [py]
        description: Deformation type (see BodyDeformationTypes).

      - name: identifier # [cpp]
        type: std::str, default="" # [cpp]
      - name: identifier # [py]
        type: str, default="" # [py]
        description: Identifier for the deformation type.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Body-fixed airspeed
  - name: bodyFixedAirspeedBasedVelocityVariable # [cpp]
  - name: body_fixed_airspeed_velocity # [py]
    short_summary: "Function to add the airspeed velocity vector to the dependent variables to save."
    # TODO: is it vector?
    extended_summary: "Function to add the airspeed velocity vector to the dependent variables to save. The airspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body. It requires the central body to have an atmosphere."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the airspeed is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Body-fixed groundspeed
  - name: bodyFixedGroundspeedBasedVelocityVariable # [cpp]
  - name: body_fixed_groundspeed_velocity # [py]
    short_summary: "Function to add the groundspeed velocity vector to the dependent variables to save."
    # TODO: is it vector?
    extended_summary: "Function to add the groundspeed velocity vector to the dependent variables to save. The groundspeed velocity is expressed with respect to a central body and returned in a frame fixed to the same central body."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the groundspeed is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Rotation matrix: from inertial to body-fixed
  - name: rotationMatrixToBodyFixedFrameVariable # [cpp]
  - name: rotation_matrix_to_body_fixed_frame # [py]
    short_summary: "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save."
    extended_summary: "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body of interest.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Rotation matrix: from LVLH to inertial
  - name: lvlhToInertialFrameRotationMatrixVariable # [cpp]
  - name: lvlh_to_inertial_rotation_matrix # [py]
    short_summary: "Function to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save."
    extended_summary: "Function to add the rotation matrix from the Local Vertical, Local Horizontal (LVLH) RF to the inertial RF to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the groundspeed is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Rotation matrix: inertial to body-fixed (through 313 euler angles)
  - name: eulerAnglesToBodyFixed313Variable # [cpp]
  - name: inertial_to_body_fixed_313_euler_angles # [py]
    short_summary: "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save."
    extended_summary: "Function to add the rotation matrix from the inertial RF to the body-fixed RF to the dependent variables to save. It uses a 313-Euler angles representation."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Rotation matrix: rotation between given aerodynamic RF
  - name: intermediateAerodynamicRotationMatrixVariable # [cpp]
  - name: intermediate_aerodynamic_rotation_matrix_variable # [py]
    short_summary: "Function to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save."
    extended_summary: "Function to add the rotation matrix from the a base aerodynamic RF to a target aerodynamic RF to the dependent variables to save. The aerodynamic RFs are collected in the AerodynamicsReferenceFrames enum."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: baseFrame # [cpp]
        type: std::str # [cpp]
      - name: base_frame # [py]
        type: str # [py]
        description: Base reference frame for the transformation.

      - name: targetFrame # [cpp]
        type: std::str # [cpp]
      - name: target_frame # [py]
        type: str # [py]
        description: Target reference frame for the transformation.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Altitude of periapsis
  - name: periapsisAltitudeVariable # [cpp]
  - name: periapsis_altitude # [py]
    short_summary: "Function to add the altitude of periapsis to the dependent variables to save."
    extended_summary: "Function to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the altitude of periapsis is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Altitude of periapsis
  - name: periapsisAltitudeVariable # [cpp]
  - name: periapsis_altitude # [py]
    short_summary: "Function to add the altitude of periapsis to the dependent variables to save."
    extended_summary: "Function to add the altitude of periapsis to the dependent variables to save. The altitude depends on the shape of the central body."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the altitude of periapsis is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Spherical position wrt to a central body
  - name: centralBodyFixedSphericalPositionVariable # [cpp]
  - name: central_body_fixed_spherical_position # [py]
    short_summary: "Function to add the spherical, body-fixed position to the dependent variables to save."
    extended_summary: "Function to add the spherical position to the dependent variables to save. The spherical position is expressed in the central body's body-fixed RF."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the spherical, body-fixed is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.




  # Cartesian position wrt to a central body
  - name: centralBodyFixedCartesianPositionVariable # [cpp]
  - name: central_body_fixed_cartesian_position # [py]
    short_summary: "Function to add the cartesian, body-fixed position to the dependent variables to save."
    extended_summary: "Function to add the cartesian position to the dependent variables to save. The cartesian position is expressed in the central body's body-fixed RF."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the cartesian, body-fixed is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.




  # Body mass
  - name: bodyMassVariable # [cpp]
  - name: body_mass # [py]
    short_summary: "Function to add the body mass to the dependent variables to save."
    extended_summary: "Function to add the body mass to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.




  # Radiation pressure coefficient
  - name: radiationPressureCoefficientVariable # [cpp]
  - name: radiation_pressure_coefficient # [py]
    short_summary: "Function to add the radiation pressure coefficient to the dependent variables to save."
    extended_summary: "Function to add the radiation pressure coefficient to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: emittingBody # [cpp]
        type: std::str # [cpp]
      - name: emitting_body # [py]
        type: str # [py]
        description: Emitting body.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.




  # Dynamic pressure
  - name: dynamicPressureVariable # [cpp]
  - name: dynamic_pressure # [py]
    short_summary: "Function to add the dynamic pressure to the dependent variables to save."
    extended_summary: "Function to add the dynamic pressure to the dependent variables to save. It requires the central body to have an atmosphere."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the dynamic pressure is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Aerodynamic g-load
  - name: aerodynamicGLoadVariable # [cpp]
  - name: aerodynamic_g_load # [py]
    short_summary: "Function to add the aerodynamic g-load to the dependent variables to save."
    extended_summary: "Function to add the aerodynamic g-load to the dependent variables to save. It requires the central body to have an atmosphere."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the aerodynamic g-load is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Atmospheric temperature
  - name: atmosphericTemperatureVariable # [cpp]
  - name: atmospheric_temperature # [py]
    short_summary: "Function to add the atmospheric temperature to the dependent variables to save."
    extended_summary: "Function to add the atmospheric temperature to the dependent variables to save. It requires the central body to have an atmosphere."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the atmospheric temperature is computed.

    returns:
      - type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.